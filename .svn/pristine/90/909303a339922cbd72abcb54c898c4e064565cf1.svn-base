<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zw.rule.mapper.datamanage.FieldTypeMapper">

    <resultMap type="com.zw.rule.datamanage.po.FieldType" id="FieldType">
        <id column="id" property="id"/>
        <result column="field_type" property="fieldType"/>
        <result column="parent_id" property="parentId"/>
        <result column="is_common" property="isCommon"/>
        <result column="engine_id" property="engineId"/>
    </resultMap>

    <select id="queryFieldTypeList" parameterType="java.util.Map" resultType="FieldType">
        select r.field_type_id as id,t.field_type as fieldType,t.parent_id as parentId,t.is_common as isCommon,#{engineId} as engineId
        from zw_field_type_user_link r, zw_field_type t
        where r.field_type_id = t.id and r.status = 1
        and r.org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        <if test="isCommon != null">
            and t.is_common = #{isCommon}
        </if>
        <if test="engineId == null">
            and r.engine_id is null
        </if>
        <if test="engineId != null">
            and r.engine_id = #{engineId}
        </if>
        <if test="parentId != null">
            and t.parent_id = #{parentId}
        </if>

        order by r.field_type_id
    </select>
    <select id='findIdByFieldType' parameterType="map" resultType="java.lang.Long">
        select IFNULL(MAX(t.id),0) as id
        from zw_field_type t,zw_field_type_user_link r
        where t.id = r.field_type_id
        and t.field_type = #{fieldType}
        and r.org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        <if test="engineId != null">
            and r.engine_id = #{engineId}
        </if>
        <if test="engineId == null">
            and r.engine_id is null
        </if>
        <if test="parentId == null">
            and t.parent_id = 0
        </if>
        <if test="parentId != null">
            and t.parent_id = #{parentId}
        </if>
    </select>

    <select id="queryFieldTypeById" parameterType="java.lang.Integer" resultType="com.zw.rule.datamanage.po.FieldType">
        select id, field_type as fieldType, parent_id as parentId
        from zw_field_type
        where id = #{id}
    </select>

    <select id='findTypeIdByParentId' parameterType="map" resultType="String">
        select group_concat(t.id) as id
        from zw_field_type t,zw_field_type_user_link r
        where t.id = r.field_type_id
        and r.org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        and r.engine_id = #{engineId}
        and t.parent_id = #{parentId}
    </select>

    <select id='findParentIdByTypeId' parameterType="map" resultType="String">
        select t.parent_id as parentId
        from zw_field_type t,zw_field_type_user_link r
        where t.id = r.field_type_id
        and r.org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        <if test="engineId != null">
            and r.engine_id = #{engineId}
        </if>
        <if test="engineId == null">
            and r.engine_id is null
        </if>
        and t.id = ${fieldTypeId}
    </select>

    <select id='queryFieldType' parameterType="java.lang.Integer" resultType="com.zw.rule.datamanage.po.FieldType">
        select t.id, t.field_type as fieldType, t.parent_id as parentId
        from zw_field_type t,zw_field_type_user_link r
        where t.id = r.field_type_id
        and r.org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        <if test="engineId != null">
            and r.engine_id = #{engineId}
            and r.field_type_id not in ( select field_type_id from zw_field_type_user_link where engine_id is null )
        </if>
        <if test="engineId == null">
            and r.engine_id is null
        </if>
    </select>

    <insert id="addFieldType" useGeneratedKeys="true" keyProperty="id" parameterType="FieldType">
        insert into zw_field_type ( field_type, parent_id, is_common )
        values ( #{fieldType}, #{parentId}, #{isCommon} )
    </insert>

    <update id="updateFieldType" parameterType="map">
        update zw_field_type
        set   field_type = #{fieldType}
        where id = (select field_type_id
        from zw_field_type_user_link
        where org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        <if test="engineId != null">
            and engine_id = #{engineId}
        </if>
        <if test="engineId == null">
            and engine_id is null
        </if>
        and field_type_id = #{id}
        )
    </update>

    <update id="deleteFieldType" parameterType="map">
        DELETE from zw_field_type
        where id = (select field_type_id
        from zw_field_type_user_link
        where org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        <if test="engineId != null">
            and engine_id = #{engineId}
        </if>
        <if test="engineId == null">
            and engine_id is null
        </if>
        and field_type_id = #{id}
        )
    </update>
    <update id="updateFieldTypeByTypeIds" parameterType="map">
        update zw_field_type_user_link
        set status = -1
        where org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        and engine_id = #{engineId}
        and field_type_id in
        <foreach collection="fieldTypeIds" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and status = 1
    </update>

    <update id="deleteFieldTypeByTypeIds" parameterType="map">
        delete from zw_field_type_user_link
        where org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        and engine_id = #{engineId}
        and field_type_id in
        <foreach collection="fieldTypeIds" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and field_type_id not in
        ( select field_type_id
        from zw_field f,zw_field_user_link r
        where f.id = r.field_id
        and f.field_type_id in
        <foreach collection="fieldTypeIds" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        )
    </update>

    <update id="backFieldTypeByTypeIds" parameterType="map">
        update zw_field_type_user_link
        set status = 1
        where org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        and engine_id = #{engineId}
        and field_type_id in
        <foreach collection="fieldTypeIds" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and status = -1
    </update>

    <select id="isExists" parameterType="map"  resultType="java.lang.Integer">
        select count(ft.id)
        from zw_field_type ft,zw_field_type_user_link r
        where ft.id = r.field_type_id
        and r.org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        and ft.field_type = #{fieldType}
        <if test="Id != null">
            and ft.id != #{Id}
        </if>
        <if test="engineId != null">
            and r.engine_id = #{engineId}
        </if>
        <if test="engineId == null">
            and r.engine_id is null
        </if>
        and ft.parent_id = #{parentId}
    </select>

    <select id="isExistsDefaultTreeName" parameterType="map"  resultType="java.lang.Integer">
        select count(ft.id)
        from zw_field_type ft,zw_field_type_user_link r
        where ft.id = r.field_type_id
        and r.org_id = ( select org_id from zw_sys_user where user_id = #{userId} )
        and ft.field_type = #{fieldType}
        <if test="engineId != null">
            and r.engine_id = #{engineId}
        </if>
        <if test="engineId == null">
            and r.engine_id is null
        </if>
        and ft.parent_id = #{parentId}
    </select>

</mapper>